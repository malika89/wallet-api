// Code generated by goctl. DO NOT EDIT.
// Source: wallet.proto

package client

import (
	"context"
	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
	"wallet-api/proto"
)

type (
	CreateWalletRequest  = proto.CreateWalletRequest
	CreateWalletResponse = proto.CreateWalletResponse
	DepositReq           = proto.DepositReq
	DepositResp          = proto.DepositResp
	GetBalanceRequest    = proto.GetBalanceRequest
	GetBalanceResponse   = proto.GetBalanceResponse
	TransferRequest      = proto.TransferRequest
	TransferResponse     = proto.TransferResponse
	WithdrawReq          = proto.WithdrawReq
	WithdrawResp         = proto.WithdrawResp

	Wallet interface {
		Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
		CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
		GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
		Withdraw(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawResp, error)
		Deposit(ctx context.Context, in *DepositReq, opts ...grpc.CallOption) (*DepositResp, error)
	}

	defaultWallet struct {
		cli zrpc.Client
	}
)

func NewWallet(cli zrpc.Client) Wallet {
	return &defaultWallet{
		cli: cli,
	}
}

func (m *defaultWallet) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	client := proto.NewWalletClient(m.cli.Conn())
	return client.Transfer(ctx, in, opts...)
}

func (m *defaultWallet) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	client := proto.NewWalletClient(m.cli.Conn())
	return client.CreateWallet(ctx, in, opts...)
}

func (m *defaultWallet) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	client := proto.NewWalletClient(m.cli.Conn())
	return client.GetBalance(ctx, in, opts...)
}

func (m *defaultWallet) Withdraw(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawResp, error) {
	client := proto.NewWalletClient(m.cli.Conn())
	return client.Withdraw(ctx, in, opts...)
}

func (m *defaultWallet) Deposit(ctx context.Context, in *DepositReq, opts ...grpc.CallOption) (*DepositResp, error) {
	client := proto.NewWalletClient(m.cli.Conn())
	return client.Deposit(ctx, in, opts...)
}
